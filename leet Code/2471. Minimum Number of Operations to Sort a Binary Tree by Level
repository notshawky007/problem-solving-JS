/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number}
 */
const minimumOperations = (root) => {
    let d = levelOrder_BFS(root), res = 0;
    for (const a of d) res += minSwapSortArray(a);
    return res;
};

const minSwapSortArray = (a) => {
    let n = a.length, b = [...a].sort((x, y) => x - y), m = new Map(), res = 0;
    for (let i = 0; i < n; i++) m.set(a[i], i);
    for (let i = 0; i < n; i++) {
        if (a[i] != b[i]) {
            res++;
            let j = m.get(b[i]);
            m.set(a[i], j);
            m.set(b[i], i);
            [a[i], a[j]] = [a[j], a[i]];
        }
    }
    return res;
};

const levelOrder_BFS = (root) => {
    let data = [];
    getAllLevels(root, 0, data);
    return data;
};

const getAllLevels = (root, level, data) => {
    if (!root) return;
    if (level >= data.length) data.push([]);
    data[level].push(root.val);
    getAllLevels(root.left, level + 1, data);
    getAllLevels(root.right, level + 1, data);
};
