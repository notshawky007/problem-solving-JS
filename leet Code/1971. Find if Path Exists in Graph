/**
 * @param {number} n
 * @param {number[][]} edges
 * @param {number} source
 * @param {number} destination
 * @return {boolean}
 */
function validPath(n, edges, source, destination) {
    let nodes = new Map(Array.from(Array(n).keys()).map(i => [i, i]))
    const root = (i) => {
        let r = i;
        while (r !== nodes.get(r)) {
            r = nodes.get(r)
        }
        return r
    }

    const union = (p, q) => {
        const i = root(p);
        const j = root(q);
        nodes.set(i, j)
    }


    const isConnected = (p, q) => {
        const proot = root(p)
        const qroot = root(q)
        return proot === qroot
    }
    for (let i of edges) {
        const [p, q] = i
        union(p, q)
    }
    return isConnected(source, destination)
};
