var findMinArrowShots = function(points) {
    points.sort((a, b) => a[0] - b[0]); // Sort the points based on the start position

    let arrows = 1; // Start with 1 arrow assuming at least one balloon exists
    let end = points[0][1]; // Initialize the end position with the end of the first balloon

    // Iterate through the points
    for (let i = 1; i < points.length; i++) {
        // If the current balloon starts after the end position, it requires a new arrow
        if (points[i][0] > end) {
            arrows++; // Increment arrow count
            end = points[i][1]; // Update end position to the end of the current balloon
        } else {
            // If the current balloon is within the range of the end position,
            // update the end position to the minimum of the current end position and the end of the current balloon
            end = Math.min(end, points[i][1]);
        }
    }

    return arrows; // Return the total number of arrows required
};
